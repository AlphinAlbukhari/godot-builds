name: Reusable build workflow

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      flags:
        type: string
        required: true
      modules-path:
        type: string
        required: true
      name:
        type: string
        required: true
      build-name:
        type: string
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_NAME: ${{ inputs.build-name }}
  ref: ${{ inputs.ref }}
  flags: ${{ inputs.flags }}
  modules: ${{ inputs.modules-path }}
  tools: no

jobs:
  linux:
    name: Linux temps
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target: [template_release, template_debug]
        bits: [64]
    steps:
      - name: Compilation
        uses: bend-n/godot-builds/.github/actions/build-godot@main
        with:
          target: ${{ matrix.target }}
          flags: bits=${{ matrix.bits }} ${{ env.flags }}
          platform: linuxbsd

      - name: Upload artifact
        uses: bend-n/godot-builds/.github/actions/upload-artifact@main
        with:
          path: godot/bin/*.x86_64

  windows:
    strategy:
      matrix:
        target: [template_release, template_debug]
        bits: [64]
    name: Win temps
    runs-on: windows-latest
    steps:
      - name: Compilation
        uses: bend-n/godot-builds/.github/actions/build-godot@main
        with:
          target: ${{ matrix.target }}
          flags: bits=${{ matrix.bits }} ${{ env.flags }}
          platform: windows

      - name: Upload artifact
        uses: bend-n/godot-builds/.github/actions/upload-artifact@main
        with:
          path: godot/bin/*.exe

  android:
    name: Android temps
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target: [template_release, template_debug]
    steps:
      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin

      - name: Compilation (armv7)
        uses: bend-n/godot-builds/.github/actions/build-godot@main
        with:
          target: ${{ matrix.target }}
          flags: android_arch=armv7 ${{ env.flags }}
          platform: android

      - name: Compilation (arm64v8)
        uses: bend-n/godot-builds/.github/actions/build-godot@main
        with:
          target: ${{ matrix.target }}
          flags: android_arch=arm64v8 ${{ env.flags }}
          platform: android

      - name: Generate Godot templates
        run: |
          cd godot
          (cd platform/android/java && ./gradlew generateGodotTemplates)

      - name: Upload artifact
        uses: bend-n/godot-builds/.github/actions/upload-artifact@main
        with:
          path: godot/bin/*.apk

  macos:
    strategy:
      matrix:
        target: [template_release, template_debug]

    name: macOS temps
    runs-on: macos-latest
    steps:
      - name: Install MoltenVK
        run: |
          #https://github.com/godotengine/godot/blob/0ff8742919af72c7412e63ef0f646cb4e7bd7d8f/misc/scripts/install_vulkan_sdk_macos.sh
          set -euo pipefail
          IFS=$'\n\t'
          curl -L "https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg" -o /tmp/vulkan-sdk.dmg
          hdiutil attach /tmp/vulkan-sdk.dmg -mountpoint /Volumes/vulkan-sdk
          /Volumes/vulkan-sdk/InstallVulkan.app/Contents/MacOS/InstallVulkan \
              --accept-licenses --default-answer --confirm-command install
          hdiutil detach /Volumes/vulkan-sdk
          rm -f /tmp/vulkan-sdk.dmg

      - name: Compilation(x86_64)
        uses: bend-n/godot-builds/.github/actions/build-godot@main
        with:
          flags: arch=x86_64 ${{ env.flags }}
          target: ${{ matrix.target }}
          platform: macos

      - name: Compilation(arm64)
        uses: bend-n/godot-builds/.github/actions/build-godot@main
        with:
          flags: arch=arm64 ${{ env.flags }}
          target: ${{ matrix.target }}
          platform: macos

      - name: Create universal
        run: |
          [[ "${{ matrix.target }}" == *"debug"* ]] && target='.debug'
          cd godot
          intel=bin/godot.macos.*.x86_64
          arm=bin/godot.macos.*.arm64
          lipo -create $intel $arm -output "bin/godot.macos.opt$target.universal"
          strip "bin/godot.macos.opt$target.universal"

      - name: Upload artifact
        uses: bend-n/godot-builds/.github/actions/upload-artifact@main
        with:
          path: godot/bin/*.universal

  web:
    strategy:
      matrix:
        target: [template_release, template_debug]
        flags: [dlink_enabled=yes, ""]

    name: JS temps
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Emscripten 3.1.18
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: 3.1.18

      - name: Verify Emscripten setup
        run: emcc -v

      - name: Compilation
        uses: bend-n/godot-builds/.github/actions/build-godot@main
        with:
          target: ${{ matrix.target }}
          flags: ${{ env.flags }} ${{ matrix.flags }}
          platform: web

      - name: Upload artifact
        uses: bend-n/godot-builds/.github/actions/upload-artifact@main
        with:
          path: godot/bin/*.zip

  templates:
    needs: [web, macos, windows, linux, android]
    name: Bundle all templates
    runs-on: ubuntu-latest
    env:
      tmps: "templates"
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Prepare files
        run: |
          mkdir -vp ${tmps}
          git clone --depth 1 'https://github.com/godotengine/godot' -b 3.x godot-repo
          ls -R
          echo "Preparing linux"
          mv linux/godot.linuxbsd.opt.64 ${tmps}/linux_linuxbsd_64_release
          mv linux/godot.linuxbsd.opt.debug.64 ${tmps}/linux_linuxbsd_64_debug

          echo "Preparing windows"
          mv windows/godot.windows.opt.64.exe ${tmps}/windows_64_release.exe
          mv windows/godot.windows.opt.debug.64.exe ${tmps}/windows_64_debug.exe

          echo "Preparing android"
          mv android/android_debug.apk ${tmps}/android_debug.apk
          mv android/android_release.apk ${tmps}/android_release.apk

          echo "Preparing macos"
          cp -r godot-repo/misc/dist/osx_template.app .
          mkdir -p osx_template.app/Contents/MacOS
          cp macos/godot.macos.opt.universal osx_template.app/Contents/MacOS/godot_osx_release.64
          cp macos/godot.macos.opt.debug.universal osx_template.app/Contents/MacOS/godot_osx_debug.64
          chmod +x osx_template.app/Contents/MacOS/godot_osx_*.64
          zip -q -9 -r ${tmps}/osx.zip osx_template.app

          echo "Preparing web"
          mv web/godot.web.opt.zip ${tmps}/web_release.zip
          mv web/godot.web.opt.debug.zip ${tmps}/web_debug.zip
          mv web/godot.web.opt.dlink.zip ${tmps}/web_dlink_release.zip
          mv web/godot.web.opt.debug.dlink.zip ${tmps}/web_dlink_debug.zip

      - name: Prepare bundle
        run: "cd ${tmps} && zip -q -9 -r templates.tpz ./*"

      - name: Upload artifact
        uses: bend-n/godot-builds/.github/actions/upload-artifact@main
        with:
          path: ${{ env.tmps }}/templates.tpz

  editor:
    name: Linux tools
    runs-on: ubuntu-20.04
    steps:
      - name: Compilation
        uses: bend-n/godot-builds/.github/actions/build-godot@main
        with:
          platform: linuxbsd
          target: editor

      - name: Upload artifact
        uses: bend-n/godot-builds/.github/actions/upload-artifact@main
        with:
          name: linuxbsd-editor-release
          path: godot/bin/*.x86_64

  image:
    permissions: write-all
    name: Docker image
    runs-on: ubuntu-latest
    needs: [editor, templates]
    steps:
      - uses: bend-n/godot-builds/.github/actions/build-upload-image@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ inputs.name }}

  release:
    name: Create/update a release
    runs-on: ubuntu-latest
    needs: [editor, templates]
    steps:
      - uses: bend-n/godot-builds/.github/actions/release@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ inputs.name }}
